AWSTemplateFormatVersion: "2010-09-09"
Description: "This is the workshop number 4"

Resources:
  S3WorkshopBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: "s3workshopbuckets"

  IAMRoleWorkshop:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      RoleName: S3WorkshopIAMRoleWorkshop
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "WorkshopS3ReadWriteAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "arn:aws:s3:::${S3WorkshopBucket}"
                  - !Sub "arn:aws:s3:::${S3WorkshopBucket}/*"

  LambdaFunctionWorkshop:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    Properties:
      Description: "The function for Workshop"
      FunctionName: "Readhandler"
      Handler: "index.lambda_handler"
      Role: !GetAtt IAMRoleWorkshop.Arn
      Runtime: "python3.9"
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          def lambda_handler(event, context):
            s3 = boto3.client('s3')
            bucket_name = event['queryStringParameters']['bucket']
            object_key = event['queryStringParameters']['key']
            if bucket_name:
              response = s3.get_object(Bucket=bucket_name, Key=object_key)
              data = response['Body'].read()
              return {
                  'statusCode': 200,
                  'body': data.decode('utf-8')
              }
            else:
              print(s3)
              return {
                  'statusCode': 200,
                  'body': "data"
              }

      Tags:
        - Key: team
          Value: dev
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3WorkshopBucket

  TheRestAPIWorkshop:
    Type: AWS::ApiGateway::RestApi
    DeletionPolicy: Delete
    Properties:
      Name: "The REST API"

  APIResourceWorkshop:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Delete
    Properties:
      RestApiId: !Ref TheRestAPIWorkshop
      ParentId: !GetAtt TheRestAPIWorkshop.RootResourceId
      PathPart: "api"

  APIMethodWorkshop:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Delete
    Properties:
      RestApiId: !Ref TheRestAPIWorkshop
      ResourceId: !Ref APIResourceWorkshop
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionWorkshop.Arn}/invocations"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
      RequestParameters:
        method.request.querystring.bucket: true
        method.request.querystring.key: true
        integration.request.querystring.bucket: "method.request.querystring.bucket"
        integration.request.querystring.key: "method.request.querystring.key"
    DependsOn:
      - APIResourceWorkshop

  LambdaPermissionWorkshop:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Delete
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LambdaFunctionWorkshop
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TheRestAPIWorkshop}/*/GET/api"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref TheRestAPIWorkshop
      StageName: Prod
    DependsOn:
      - APIMethodWorkshop

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref TheRestAPIWorkshop
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: Prod
    DependsOn:
      - APIMethodWorkshop
